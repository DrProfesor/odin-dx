package dx

ID3D11Device4 :: struct {
    using vtbl: ^ID3D11Device4Vtbl,
}

ID3D11Device4Vtbl :: struct {
    QueryInterface : proc(This: ^ID3D11Device4, riid: REFIID, ppvObject: ^rawptr) -> HRESULT,
    AddRef : proc(This: ^ID3D11Device4) -> ULONG,
    Release : proc(This: ^ID3D11Device4) -> ULONG,
    CreateBuffer : proc(This: ^ID3D11Device4, pDesc: ^D3D11_BUFFER_DESC, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppBuffer: ^^ID3D11Buffer) -> HRESULT,
    CreateTexture1D : proc(This: ^ID3D11Device4, pDesc: ^D3D11_TEXTURE1D_DESC, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppTexture1D: ^^ID3D11Texture1D) -> HRESULT,
    CreateTexture2D : proc(This: ^ID3D11Device4, pDesc: ^D3D11_TEXTURE2D_DESC, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppTexture2D: ^^ID3D11Texture2D) -> HRESULT,
    CreateTexture3D : proc(This: ^ID3D11Device4, pDesc: ^D3D11_TEXTURE3D_DESC, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppTexture3D: ^^ID3D11Texture3D) -> HRESULT,
    CreateShaderResourceView : proc(This: ^ID3D11Device4, pResource: ^ID3D11Resource, pDesc: ^D3D11_SHADER_RESOURCE_VIEW_DESC, ppSRView: ^^ID3D11ShaderResourceView) -> HRESULT,
    CreateUnorderedAccessView : proc(This: ^ID3D11Device4, pResource: ^ID3D11Resource, pDesc: ^D3D11_UNORDERED_ACCESS_VIEW_DESC, ppUAView: ^^ID3D11UnorderedAccessView) -> HRESULT,
    CreateRenderTargetView : proc(This: ^ID3D11Device4, pResource: ^ID3D11Resource, pDesc: ^D3D11_RENDER_TARGET_VIEW_DESC, ppRTView: ^^ID3D11RenderTargetView) -> HRESULT,
    CreateDepthStencilView : proc(This: ^ID3D11Device4, pResource: ^ID3D11Resource, pDesc: ^D3D11_DEPTH_STENCIL_VIEW_DESC, ppDepthStencilView: ^^ID3D11DepthStencilView) -> HRESULT,
    CreateInputLayout : proc(This: ^ID3D11Device4, pInputElementDescs: ^D3D11_INPUT_ELEMENT_DESC, NumElements: UINT, pShaderBytecodeWithInputSignature: rawptr, BytecodeLength: SIZE_T, ppInputLayout: ^^ID3D11InputLayout) -> HRESULT,
    CreateVertexShader : proc(This: ^ID3D11Device4, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppVertexShader: ^^ID3D11VertexShader) -> HRESULT,
    CreateGeometryShader : proc(This: ^ID3D11Device4, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppGeometryShader: ^^ID3D11GeometryShader) -> HRESULT,
    CreateGeometryShaderWithStreamOutput : proc(This: ^ID3D11Device4, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pSODeclaration: ^D3D11_SO_DECLARATION_ENTRY, NumEntries: UINT, pBufferStrides: ^UINT, NumStrides: UINT, RasterizedStream: UINT, pClassLinkage: ^ID3D11ClassLinkage, ppGeometryShader: ^^ID3D11GeometryShader) -> HRESULT,
    CreatePixelShader : proc(This: ^ID3D11Device4, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppPixelShader: ^^ID3D11PixelShader) -> HRESULT,
    CreateHullShader : proc(This: ^ID3D11Device4, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppHullShader: ^^ID3D11HullShader) -> HRESULT,
    CreateDomainShader : proc(This: ^ID3D11Device4, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppDomainShader: ^^ID3D11DomainShader) -> HRESULT,
    CreateComputeShader : proc(This: ^ID3D11Device4, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppComputeShader: ^^ID3D11ComputeShader) -> HRESULT,
    CreateClassLinkage : proc(This: ^ID3D11Device4, ppLinkage: ^^ID3D11ClassLinkage) -> HRESULT,
    CreateBlendState : proc(This: ^ID3D11Device4, pBlendStateDesc: ^D3D11_BLEND_DESC, ppBlendState: ^^ID3D11BlendState) -> HRESULT,
    CreateDepthStencilState : proc(This: ^ID3D11Device4, pDepthStencilDesc: ^D3D11_DEPTH_STENCIL_DESC, ppDepthStencilState: ^^ID3D11DepthStencilState) -> HRESULT,
    CreateRasterizerState : proc(This: ^ID3D11Device4, pRasterizerDesc: ^D3D11_RASTERIZER_DESC, ppRasterizerState: ^^ID3D11RasterizerState) -> HRESULT,
    CreateSamplerState : proc(This: ^ID3D11Device4, pSamplerDesc: ^D3D11_SAMPLER_DESC, ppSamplerState: ^^ID3D11SamplerState) -> HRESULT,
    CreateQuery : proc(This: ^ID3D11Device4, pQueryDesc: ^D3D11_QUERY_DESC, ppQuery: ^^ID3D11Query) -> HRESULT,
    CreatePredicate : proc(This: ^ID3D11Device4, pPredicateDesc: ^D3D11_QUERY_DESC, ppPredicate: ^^ID3D11Predicate) -> HRESULT,
    CreateCounter : proc(This: ^ID3D11Device4, pCounterDesc: ^D3D11_COUNTER_DESC, ppCounter: ^^ID3D11Counter) -> HRESULT,
    CreateDeferredContext : proc(This: ^ID3D11Device4, ContextFlags: UINT, ppDeferredContext: ^^ID3D11DeviceContext) -> HRESULT,
    OpenSharedResource : proc(This: ^ID3D11Device4, hResource: HANDLE, ReturnedInterface: REFIID, ppResource: ^rawptr) -> HRESULT,
    CheckFormatSupport : proc(This: ^ID3D11Device4, Format: DXGI_FORMAT, pFormatSupport: ^UINT) -> HRESULT,
    CheckMultisampleQualityLevels : proc(This: ^ID3D11Device4, Format: DXGI_FORMAT, SampleCount: UINT, pNumQualityLevels: ^UINT) -> HRESULT,
    CheckCounterInfo : proc(This: ^ID3D11Device4, pCounterInfo: ^D3D11_COUNTER_INFO),
    CheckCounter : proc(This: ^ID3D11Device4, pDesc: ^D3D11_COUNTER_DESC, pType: ^D3D11_COUNTER_TYPE, pActiveCounters: ^UINT, szName: LPSTR, pNameLength: ^UINT, szUnits: LPSTR, pUnitsLength: ^UINT, szDescription: LPSTR, pDescriptionLength: ^UINT) -> HRESULT,
    CheckFeatureSupport : proc(This: ^ID3D11Device4, Feature: D3D11_FEATURE, pFeatureSupportData: rawptr, FeatureSupportDataSize: UINT) -> HRESULT,
    GetPrivateData : proc(This: ^ID3D11Device4, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) -> HRESULT,
    SetPrivateData : proc(This: ^ID3D11Device4, guid: REFGUID, DataSize: UINT, pData: rawptr) -> HRESULT,
    SetPrivateDataInterface : proc(This: ^ID3D11Device4, guid: REFGUID, pData: ^IUnknown) -> HRESULT,
    GetFeatureLevel : proc(This: ^ID3D11Device4) -> D3D_FEATURE_LEVEL,
    GetCreationFlags : proc(This: ^ID3D11Device4) -> UINT,
    GetDeviceRemovedReason : proc(This: ^ID3D11Device4) -> HRESULT,
    GetImmediateContext : proc(This: ^ID3D11Device4, ppImmediateContext: ^^ID3D11DeviceContext),
    SetExceptionMode : proc(This: ^ID3D11Device4, RaiseFlags: UINT) -> HRESULT,
    GetExceptionMode : proc(This: ^ID3D11Device4) -> UINT,
    GetImmediateContext1 : proc(This: ^ID3D11Device4, ppImmediateContext: ^^ID3D11DeviceContext1),
    CreateDeferredContext1 : proc(This: ^ID3D11Device4, ContextFlags: UINT, ppDeferredContext: ^^ID3D11DeviceContext1) -> HRESULT,
    CreateBlendState1 : proc(This: ^ID3D11Device4, pBlendStateDesc: ^D3D11_BLEND_DESC1, ppBlendState: ^^ID3D11BlendState1) -> HRESULT,
    CreateRasterizerState1 : proc(This: ^ID3D11Device4, pRasterizerDesc: ^D3D11_RASTERIZER_DESC1, ppRasterizerState: ^^ID3D11RasterizerState1) -> HRESULT,
    CreateDeviceContextState : proc(This: ^ID3D11Device4, Flags: UINT, pFeatureLevels: ^D3D_FEATURE_LEVEL, FeatureLevels: UINT, SDKVersion: UINT, EmulatedInterface: REFIID, pChosenFeatureLevel: ^D3D_FEATURE_LEVEL, ppContextState: ^^ID3DDeviceContextState) -> HRESULT,
    OpenSharedResource1 : proc(This: ^ID3D11Device4, hResource: HANDLE, returnedInterface: REFIID, ppResource: ^rawptr) -> HRESULT,
    OpenSharedResourceByName : proc(This: ^ID3D11Device4, lpName: LPCWSTR, dwDesiredAccess: DWORD, returnedInterface: REFIID, ppResource: ^rawptr) -> HRESULT,
    GetImmediateContext2 : proc(This: ^ID3D11Device4, ppImmediateContext: ^^ID3D11DeviceContext2),
    CreateDeferredContext2 : proc(This: ^ID3D11Device4, ContextFlags: UINT, ppDeferredContext: ^^ID3D11DeviceContext2) -> HRESULT,
    GetResourceTiling : proc(This: ^ID3D11Device4, pTiledResource: ^ID3D11Resource, pNumTilesForEntireResource: ^UINT, pPackedMipDesc: ^D3D11_PACKED_MIP_DESC, pStandardTileShapeForNonPackedMips: ^D3D11_TILE_SHAPE, pNumSubresourceTilings: ^UINT, FirstSubresourceTilingToGet: UINT, pSubresourceTilingsForNonPackedMips: ^D3D11_SUBRESOURCE_TILING),
    CheckMultisampleQualityLevels1 : proc(This: ^ID3D11Device4, Format: DXGI_FORMAT, SampleCount: UINT, Flags: UINT, pNumQualityLevels: ^UINT) -> HRESULT,
    CreateTexture2D1 : proc(This: ^ID3D11Device4, pDesc1: ^D3D11_TEXTURE2D_DESC1, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppTexture2D: ^^ID3D11Texture2D1) -> HRESULT,
    CreateTexture3D1 : proc(This: ^ID3D11Device4, pDesc1: ^D3D11_TEXTURE3D_DESC1, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppTexture3D: ^^ID3D11Texture3D1) -> HRESULT,
    CreateRasterizerState2 : proc(This: ^ID3D11Device4, pRasterizerDesc: ^D3D11_RASTERIZER_DESC2, ppRasterizerState: ^^ID3D11RasterizerState2) -> HRESULT,
    CreateShaderResourceView1 : proc(This: ^ID3D11Device4, pResource: ^ID3D11Resource, pDesc1: ^D3D11_SHADER_RESOURCE_VIEW_DESC1, ppSRView1: ^^ID3D11ShaderResourceView1) -> HRESULT,
    CreateUnorderedAccessView1 : proc(This: ^ID3D11Device4, pResource: ^ID3D11Resource, pDesc1: ^D3D11_UNORDERED_ACCESS_VIEW_DESC1, ppUAView1: ^^ID3D11UnorderedAccessView1) -> HRESULT,
    CreateRenderTargetView1 : proc(This: ^ID3D11Device4, pResource: ^ID3D11Resource, pDesc1: ^D3D11_RENDER_TARGET_VIEW_DESC1, ppRTView1: ^^ID3D11RenderTargetView1) -> HRESULT,
    CreateQuery1 : proc(This: ^ID3D11Device4, pQueryDesc1: ^D3D11_QUERY_DESC1, ppQuery1: ^^ID3D11Query1) -> HRESULT,
    GetImmediateContext3 : proc(This: ^ID3D11Device4, ppImmediateContext: ^^ID3D11DeviceContext3),
    CreateDeferredContext3 : proc(This: ^ID3D11Device4, ContextFlags: UINT, ppDeferredContext: ^^ID3D11DeviceContext3) -> HRESULT,
    WriteToSubresource : proc(This: ^ID3D11Device4, pDstResource: ^ID3D11Resource, DstSubresource: UINT, pDstBox: ^D3D11_BOX, pSrcData: rawptr, SrcRowPitch: UINT, SrcDepthPitch: UINT),
    ReadFromSubresource : proc(This: ^ID3D11Device4, pDstData: rawptr, DstRowPitch: UINT, DstDepthPitch: UINT, pSrcResource: ^ID3D11Resource, SrcSubresource: UINT, pSrcBox: ^D3D11_BOX),
    RegisterDeviceRemovedEvent : proc(This: ^ID3D11Device4, hEvent: HANDLE, pdwCookie: ^DWORD) -> HRESULT,
    UnregisterDeviceRemoved : proc(This: ^ID3D11Device4, dwCookie: DWORD),
}

ID3D11Device5 :: struct {
    using vtbl: ^ID3D11Device5Vtbl,
}

ID3D11Device5Vtbl :: struct {
    QueryInterface : proc(This: ^ID3D11Device5, riid: REFIID, ppvObject: ^rawptr) -> HRESULT,
    AddRef : proc(This: ^ID3D11Device5) -> ULONG,
    Release : proc(This: ^ID3D11Device5) -> ULONG,
    CreateBuffer : proc(This: ^ID3D11Device5, pDesc: ^D3D11_BUFFER_DESC, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppBuffer: ^^ID3D11Buffer) -> HRESULT,
    CreateTexture1D : proc(This: ^ID3D11Device5, pDesc: ^D3D11_TEXTURE1D_DESC, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppTexture1D: ^^ID3D11Texture1D) -> HRESULT,
    CreateTexture2D : proc(This: ^ID3D11Device5, pDesc: ^D3D11_TEXTURE2D_DESC, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppTexture2D: ^^ID3D11Texture2D) -> HRESULT,
    CreateTexture3D : proc(This: ^ID3D11Device5, pDesc: ^D3D11_TEXTURE3D_DESC, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppTexture3D: ^^ID3D11Texture3D) -> HRESULT,
    CreateShaderResourceView : proc(This: ^ID3D11Device5, pResource: ^ID3D11Resource, pDesc: ^D3D11_SHADER_RESOURCE_VIEW_DESC, ppSRView: ^^ID3D11ShaderResourceView) -> HRESULT,
    CreateUnorderedAccessView : proc(This: ^ID3D11Device5, pResource: ^ID3D11Resource, pDesc: ^D3D11_UNORDERED_ACCESS_VIEW_DESC, ppUAView: ^^ID3D11UnorderedAccessView) -> HRESULT,
    CreateRenderTargetView : proc(This: ^ID3D11Device5, pResource: ^ID3D11Resource, pDesc: ^D3D11_RENDER_TARGET_VIEW_DESC, ppRTView: ^^ID3D11RenderTargetView) -> HRESULT,
    CreateDepthStencilView : proc(This: ^ID3D11Device5, pResource: ^ID3D11Resource, pDesc: ^D3D11_DEPTH_STENCIL_VIEW_DESC, ppDepthStencilView: ^^ID3D11DepthStencilView) -> HRESULT,
    CreateInputLayout : proc(This: ^ID3D11Device5, pInputElementDescs: ^D3D11_INPUT_ELEMENT_DESC, NumElements: UINT, pShaderBytecodeWithInputSignature: rawptr, BytecodeLength: SIZE_T, ppInputLayout: ^^ID3D11InputLayout) -> HRESULT,
    CreateVertexShader : proc(This: ^ID3D11Device5, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppVertexShader: ^^ID3D11VertexShader) -> HRESULT,
    CreateGeometryShader : proc(This: ^ID3D11Device5, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppGeometryShader: ^^ID3D11GeometryShader) -> HRESULT,
    CreateGeometryShaderWithStreamOutput : proc(This: ^ID3D11Device5, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pSODeclaration: ^D3D11_SO_DECLARATION_ENTRY, NumEntries: UINT, pBufferStrides: ^UINT, NumStrides: UINT, RasterizedStream: UINT, pClassLinkage: ^ID3D11ClassLinkage, ppGeometryShader: ^^ID3D11GeometryShader) -> HRESULT,
    CreatePixelShader : proc(This: ^ID3D11Device5, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppPixelShader: ^^ID3D11PixelShader) -> HRESULT,
    CreateHullShader : proc(This: ^ID3D11Device5, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppHullShader: ^^ID3D11HullShader) -> HRESULT,
    CreateDomainShader : proc(This: ^ID3D11Device5, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppDomainShader: ^^ID3D11DomainShader) -> HRESULT,
    CreateComputeShader : proc(This: ^ID3D11Device5, pShaderBytecode: rawptr, BytecodeLength: SIZE_T, pClassLinkage: ^ID3D11ClassLinkage, ppComputeShader: ^^ID3D11ComputeShader) -> HRESULT,
    CreateClassLinkage : proc(This: ^ID3D11Device5, ppLinkage: ^^ID3D11ClassLinkage) -> HRESULT,
    CreateBlendState : proc(This: ^ID3D11Device5, pBlendStateDesc: ^D3D11_BLEND_DESC, ppBlendState: ^^ID3D11BlendState) -> HRESULT,
    CreateDepthStencilState : proc(This: ^ID3D11Device5, pDepthStencilDesc: ^D3D11_DEPTH_STENCIL_DESC, ppDepthStencilState: ^^ID3D11DepthStencilState) -> HRESULT,
    CreateRasterizerState : proc(This: ^ID3D11Device5, pRasterizerDesc: ^D3D11_RASTERIZER_DESC, ppRasterizerState: ^^ID3D11RasterizerState) -> HRESULT,
    CreateSamplerState : proc(This: ^ID3D11Device5, pSamplerDesc: ^D3D11_SAMPLER_DESC, ppSamplerState: ^^ID3D11SamplerState) -> HRESULT,
    CreateQuery : proc(This: ^ID3D11Device5, pQueryDesc: ^D3D11_QUERY_DESC, ppQuery: ^^ID3D11Query) -> HRESULT,
    CreatePredicate : proc(This: ^ID3D11Device5, pPredicateDesc: ^D3D11_QUERY_DESC, ppPredicate: ^^ID3D11Predicate) -> HRESULT,
    CreateCounter : proc(This: ^ID3D11Device5, pCounterDesc: ^D3D11_COUNTER_DESC, ppCounter: ^^ID3D11Counter) -> HRESULT,
    CreateDeferredContext : proc(This: ^ID3D11Device5, ContextFlags: UINT, ppDeferredContext: ^^ID3D11DeviceContext) -> HRESULT,
    OpenSharedResource : proc(This: ^ID3D11Device5, hResource: HANDLE, ReturnedInterface: REFIID, ppResource: ^rawptr) -> HRESULT,
    CheckFormatSupport : proc(This: ^ID3D11Device5, Format: DXGI_FORMAT, pFormatSupport: ^UINT) -> HRESULT,
    CheckMultisampleQualityLevels : proc(This: ^ID3D11Device5, Format: DXGI_FORMAT, SampleCount: UINT, pNumQualityLevels: ^UINT) -> HRESULT,
    CheckCounterInfo : proc(This: ^ID3D11Device5, pCounterInfo: ^D3D11_COUNTER_INFO),
    CheckCounter : proc(This: ^ID3D11Device5, pDesc: ^D3D11_COUNTER_DESC, pType: ^D3D11_COUNTER_TYPE, pActiveCounters: ^UINT, szName: LPSTR, pNameLength: ^UINT, szUnits: LPSTR, pUnitsLength: ^UINT, szDescription: LPSTR, pDescriptionLength: ^UINT) -> HRESULT,
    CheckFeatureSupport : proc(This: ^ID3D11Device5, Feature: D3D11_FEATURE, pFeatureSupportData: rawptr, FeatureSupportDataSize: UINT) -> HRESULT,
    GetPrivateData : proc(This: ^ID3D11Device5, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) -> HRESULT,
    SetPrivateData : proc(This: ^ID3D11Device5, guid: REFGUID, DataSize: UINT, pData: rawptr) -> HRESULT,
    SetPrivateDataInterface : proc(This: ^ID3D11Device5, guid: REFGUID, pData: ^IUnknown) -> HRESULT,
    GetFeatureLevel : proc(This: ^ID3D11Device5) -> D3D_FEATURE_LEVEL,
    GetCreationFlags : proc(This: ^ID3D11Device5) -> UINT,
    GetDeviceRemovedReason : proc(This: ^ID3D11Device5) -> HRESULT,
    GetImmediateContext : proc(This: ^ID3D11Device5, ppImmediateContext: ^^ID3D11DeviceContext),
    SetExceptionMode : proc(This: ^ID3D11Device5, RaiseFlags: UINT) -> HRESULT,
    GetExceptionMode : proc(This: ^ID3D11Device5) -> UINT,
    GetImmediateContext1 : proc(This: ^ID3D11Device5, ppImmediateContext: ^^ID3D11DeviceContext1),
    CreateDeferredContext1 : proc(This: ^ID3D11Device5, ContextFlags: UINT, ppDeferredContext: ^^ID3D11DeviceContext1) -> HRESULT,
    CreateBlendState1 : proc(This: ^ID3D11Device5, pBlendStateDesc: ^D3D11_BLEND_DESC1, ppBlendState: ^^ID3D11BlendState1) -> HRESULT,
    CreateRasterizerState1 : proc(This: ^ID3D11Device5, pRasterizerDesc: ^D3D11_RASTERIZER_DESC1, ppRasterizerState: ^^ID3D11RasterizerState1) -> HRESULT,
    CreateDeviceContextState : proc(This: ^ID3D11Device5, Flags: UINT, pFeatureLevels: ^D3D_FEATURE_LEVEL, FeatureLevels: UINT, SDKVersion: UINT, EmulatedInterface: REFIID, pChosenFeatureLevel: ^D3D_FEATURE_LEVEL, ppContextState: ^^ID3DDeviceContextState) -> HRESULT,
    OpenSharedResource1 : proc(This: ^ID3D11Device5, hResource: HANDLE, returnedInterface: REFIID, ppResource: ^rawptr) -> HRESULT,
    OpenSharedResourceByName : proc(This: ^ID3D11Device5, lpName: LPCWSTR, dwDesiredAccess: DWORD, returnedInterface: REFIID, ppResource: ^rawptr) -> HRESULT,
    GetImmediateContext2 : proc(This: ^ID3D11Device5, ppImmediateContext: ^^ID3D11DeviceContext2),
    CreateDeferredContext2 : proc(This: ^ID3D11Device5, ContextFlags: UINT, ppDeferredContext: ^^ID3D11DeviceContext2) -> HRESULT,
    GetResourceTiling : proc(This: ^ID3D11Device5, pTiledResource: ^ID3D11Resource, pNumTilesForEntireResource: ^UINT, pPackedMipDesc: ^D3D11_PACKED_MIP_DESC, pStandardTileShapeForNonPackedMips: ^D3D11_TILE_SHAPE, pNumSubresourceTilings: ^UINT, FirstSubresourceTilingToGet: UINT, pSubresourceTilingsForNonPackedMips: ^D3D11_SUBRESOURCE_TILING),
    CheckMultisampleQualityLevels1 : proc(This: ^ID3D11Device5, Format: DXGI_FORMAT, SampleCount: UINT, Flags: UINT, pNumQualityLevels: ^UINT) -> HRESULT,
    CreateTexture2D1 : proc(This: ^ID3D11Device5, pDesc1: ^D3D11_TEXTURE2D_DESC1, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppTexture2D: ^^ID3D11Texture2D1) -> HRESULT,
    CreateTexture3D1 : proc(This: ^ID3D11Device5, pDesc1: ^D3D11_TEXTURE3D_DESC1, pInitialData: ^D3D11_SUBRESOURCE_DATA, ppTexture3D: ^^ID3D11Texture3D1) -> HRESULT,
    CreateRasterizerState2 : proc(This: ^ID3D11Device5, pRasterizerDesc: ^D3D11_RASTERIZER_DESC2, ppRasterizerState: ^^ID3D11RasterizerState2) -> HRESULT,
    CreateShaderResourceView1 : proc(This: ^ID3D11Device5, pResource: ^ID3D11Resource, pDesc1: ^D3D11_SHADER_RESOURCE_VIEW_DESC1, ppSRView1: ^^ID3D11ShaderResourceView1) -> HRESULT,
    CreateUnorderedAccessView1 : proc(This: ^ID3D11Device5, pResource: ^ID3D11Resource, pDesc1: ^D3D11_UNORDERED_ACCESS_VIEW_DESC1, ppUAView1: ^^ID3D11UnorderedAccessView1) -> HRESULT,
    CreateRenderTargetView1 : proc(This: ^ID3D11Device5, pResource: ^ID3D11Resource, pDesc1: ^D3D11_RENDER_TARGET_VIEW_DESC1, ppRTView1: ^^ID3D11RenderTargetView1) -> HRESULT,
    CreateQuery1 : proc(This: ^ID3D11Device5, pQueryDesc1: ^D3D11_QUERY_DESC1, ppQuery1: ^^ID3D11Query1) -> HRESULT,
    GetImmediateContext3 : proc(This: ^ID3D11Device5, ppImmediateContext: ^^ID3D11DeviceContext3),
    CreateDeferredContext3 : proc(This: ^ID3D11Device5, ContextFlags: UINT, ppDeferredContext: ^^ID3D11DeviceContext3) -> HRESULT,
    WriteToSubresource : proc(This: ^ID3D11Device5, pDstResource: ^ID3D11Resource, DstSubresource: UINT, pDstBox: ^D3D11_BOX, pSrcData: rawptr, SrcRowPitch: UINT, SrcDepthPitch: UINT),
    ReadFromSubresource : proc(This: ^ID3D11Device5, pDstData: rawptr, DstRowPitch: UINT, DstDepthPitch: UINT, pSrcResource: ^ID3D11Resource, SrcSubresource: UINT, pSrcBox: ^D3D11_BOX),
    RegisterDeviceRemovedEvent : proc(This: ^ID3D11Device5, hEvent: HANDLE, pdwCookie: ^DWORD) -> HRESULT,
    UnregisterDeviceRemoved : proc(This: ^ID3D11Device5, dwCookie: DWORD),
    OpenSharedFence : proc(This: ^ID3D11Device5, hFence: HANDLE, ReturnedInterface: REFIID, ppFence: ^rawptr) -> HRESULT,
    CreateFence : proc(This: ^ID3D11Device5, InitialValue: UINT64, Flags: D3D11_FENCE_FLAG, ReturnedInterface: REFIID, ppFence: ^rawptr) -> HRESULT,
}

ID3D11Multithread :: struct {
    using vtbl: ^ID3D11MultithreadVtbl,
}

ID3D11MultithreadVtbl :: struct {
    QueryInterface : proc(This: ^ID3D11Multithread, riid: REFIID, ppvObject: ^rawptr) -> HRESULT,
    AddRef : proc(This: ^ID3D11Multithread) -> ULONG,
    Release : proc(This: ^ID3D11Multithread) -> ULONG,
    Enter : proc(This: ^ID3D11Multithread),
    Leave : proc(This: ^ID3D11Multithread),
    SetMultithreadProtected : proc(This: ^ID3D11Multithread, bMTProtect: BOOL) -> BOOL,
    GetMultithreadProtected : proc(This: ^ID3D11Multithread) -> BOOL,
}

ID3D11VideoContext2 :: struct {
    using vtbl: ^ID3D11VideoContext2Vtbl,
}

ID3D11VideoContext2Vtbl :: struct {
    QueryInterface : proc(This: ^ID3D11VideoContext2, riid: REFIID, ppvObject: ^rawptr) -> HRESULT,
    AddRef : proc(This: ^ID3D11VideoContext2) -> ULONG,
    Release : proc(This: ^ID3D11VideoContext2) -> ULONG,
    GetDevice : proc(This: ^ID3D11VideoContext2, ppDevice: ^^ID3D11Device),
    GetPrivateData : proc(This: ^ID3D11VideoContext2, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) -> HRESULT,
    SetPrivateData : proc(This: ^ID3D11VideoContext2, guid: REFGUID, DataSize: UINT, pData: rawptr) -> HRESULT,
    SetPrivateDataInterface : proc(This: ^ID3D11VideoContext2, guid: REFGUID, pData: ^IUnknown) -> HRESULT,
    GetDecoderBuffer : proc(This: ^ID3D11VideoContext2, pDecoder: ^ID3D11VideoDecoder, Type: D3D11_VIDEO_DECODER_BUFFER_TYPE, pBufferSize: ^UINT, ppBuffer: ^rawptr) -> HRESULT,
    ReleaseDecoderBuffer : proc(This: ^ID3D11VideoContext2, pDecoder: ^ID3D11VideoDecoder, Type: D3D11_VIDEO_DECODER_BUFFER_TYPE) -> HRESULT,
    DecoderBeginFrame : proc(This: ^ID3D11VideoContext2, pDecoder: ^ID3D11VideoDecoder, pView: ^ID3D11VideoDecoderOutputView, ContentKeySize: UINT, pContentKey: rawptr) -> HRESULT,
    DecoderEndFrame : proc(This: ^ID3D11VideoContext2, pDecoder: ^ID3D11VideoDecoder) -> HRESULT,
    SubmitDecoderBuffers : proc(This: ^ID3D11VideoContext2, pDecoder: ^ID3D11VideoDecoder, NumBuffers: UINT, pBufferDesc: ^D3D11_VIDEO_DECODER_BUFFER_DESC) -> HRESULT,
    DecoderExtension : proc(This: ^ID3D11VideoContext2, pDecoder: ^ID3D11VideoDecoder, pExtensionData: ^D3D11_VIDEO_DECODER_EXTENSION) -> APP_DEPRECATED_HRESULT,
    VideoProcessorSetOutputTargetRect : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, Enable: BOOL, pRect: ^RECT),
    VideoProcessorSetOutputBackgroundColor : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, YCbCr: BOOL, pColor: ^D3D11_VIDEO_COLOR),
    VideoProcessorSetOutputColorSpace : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, pColorSpace: ^D3D11_VIDEO_PROCESSOR_COLOR_SPACE),
    VideoProcessorSetOutputAlphaFillMode : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, AlphaFillMode: D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, StreamIndex: UINT),
    VideoProcessorSetOutputConstriction : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, Enable: BOOL, Size: SIZE),
    VideoProcessorSetOutputStereoMode : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, Enable: BOOL),
    VideoProcessorSetOutputExtension : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, pExtensionGuid: ^GUID, DataSize: UINT, pData: rawptr) -> APP_DEPRECATED_HRESULT,
    VideoProcessorGetOutputTargetRect : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, Enabled: ^BOOL, pRect: ^RECT),
    VideoProcessorGetOutputBackgroundColor : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, pYCbCr: ^BOOL, pColor: ^D3D11_VIDEO_COLOR),
    VideoProcessorGetOutputColorSpace : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, pColorSpace: ^D3D11_VIDEO_PROCESSOR_COLOR_SPACE),
    VideoProcessorGetOutputAlphaFillMode : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, pAlphaFillMode: ^D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, pStreamIndex: ^UINT),
    VideoProcessorGetOutputConstriction : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, pEnabled: ^BOOL, pSize: ^SIZE),
    VideoProcessorGetOutputStereoMode : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, pEnabled: ^BOOL),
    VideoProcessorGetOutputExtension : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, pExtensionGuid: ^GUID, DataSize: UINT, pData: rawptr) -> APP_DEPRECATED_HRESULT,
    VideoProcessorSetStreamFrameFormat : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, FrameFormat: D3D11_VIDEO_FRAME_FORMAT),
    VideoProcessorSetStreamColorSpace : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pColorSpace: ^D3D11_VIDEO_PROCESSOR_COLOR_SPACE),
    VideoProcessorSetStreamOutputRate : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, OutputRate: D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, RepeatFrame: BOOL, pCustomRate: ^DXGI_RATIONAL),
    VideoProcessorSetStreamSourceRect : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, pRect: ^RECT),
    VideoProcessorSetStreamDestRect : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, pRect: ^RECT),
    VideoProcessorSetStreamAlpha : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, Alpha: FLOAT),
    VideoProcessorSetStreamPalette : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Count: UINT, pEntries: ^UINT),
    VideoProcessorSetStreamPixelAspectRatio : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, pSourceAspectRatio: ^DXGI_RATIONAL, pDestinationAspectRatio: ^DXGI_RATIONAL),
    VideoProcessorSetStreamLumaKey : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, Lower: FLOAT, Upper: FLOAT),
    VideoProcessorSetStreamStereoFormat : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, Format: D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, LeftViewFrame0: BOOL, BaseViewFrame0: BOOL, FlipMode: D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, MonoOffset: int),
    VideoProcessorSetStreamAutoProcessingMode : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL),
    VideoProcessorSetStreamFilter : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Filter: D3D11_VIDEO_PROCESSOR_FILTER, Enable: BOOL, Level: int),
    VideoProcessorSetStreamExtension : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pExtensionGuid: ^GUID, DataSize: UINT, pData: rawptr) -> APP_DEPRECATED_HRESULT,
    VideoProcessorGetStreamFrameFormat : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pFrameFormat: ^D3D11_VIDEO_FRAME_FORMAT),
    VideoProcessorGetStreamColorSpace : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pColorSpace: ^D3D11_VIDEO_PROCESSOR_COLOR_SPACE),
    VideoProcessorGetStreamOutputRate : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pOutputRate: ^D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, pRepeatFrame: ^BOOL, pCustomRate: ^DXGI_RATIONAL),
    VideoProcessorGetStreamSourceRect : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pRect: ^RECT),
    VideoProcessorGetStreamDestRect : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pRect: ^RECT),
    VideoProcessorGetStreamAlpha : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pAlpha: ^FLOAT),
    VideoProcessorGetStreamPalette : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Count: UINT, pEntries: ^UINT),
    VideoProcessorGetStreamPixelAspectRatio : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pSourceAspectRatio: ^DXGI_RATIONAL, pDestinationAspectRatio: ^DXGI_RATIONAL),
    VideoProcessorGetStreamLumaKey : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pLower: ^FLOAT, pUpper: ^FLOAT),
    VideoProcessorGetStreamStereoFormat : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnable: ^BOOL, pFormat: ^D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, pLeftViewFrame0: ^BOOL, pBaseViewFrame0: ^BOOL, pFlipMode: ^D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, MonoOffset: ^int),
    VideoProcessorGetStreamAutoProcessingMode : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL),
    VideoProcessorGetStreamFilter : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Filter: D3D11_VIDEO_PROCESSOR_FILTER, pEnabled: ^BOOL, pLevel: ^int),
    VideoProcessorGetStreamExtension : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pExtensionGuid: ^GUID, DataSize: UINT, pData: rawptr) -> APP_DEPRECATED_HRESULT,
    VideoProcessorBlt : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, pView: ^ID3D11VideoProcessorOutputView, OutputFrame: UINT, StreamCount: UINT, pStreams: ^D3D11_VIDEO_PROCESSOR_STREAM) -> HRESULT,
    NegotiateCryptoSessionKeyExchange : proc(This: ^ID3D11VideoContext2, pCryptoSession: ^ID3D11CryptoSession, DataSize: UINT, pData: rawptr) -> HRESULT,
    EncryptionBlt : proc(This: ^ID3D11VideoContext2, pCryptoSession: ^ID3D11CryptoSession, pSrcSurface: ^ID3D11Texture2D, pDstSurface: ^ID3D11Texture2D, IVSize: UINT, pIV: rawptr),
    DecryptionBlt : proc(This: ^ID3D11VideoContext2, pCryptoSession: ^ID3D11CryptoSession, pSrcSurface: ^ID3D11Texture2D, pDstSurface: ^ID3D11Texture2D, pEncryptedBlockInfo: ^D3D11_ENCRYPTED_BLOCK_INFO, ContentKeySize: UINT, pContentKey: rawptr, IVSize: UINT, pIV: rawptr),
    StartSessionKeyRefresh : proc(This: ^ID3D11VideoContext2, pCryptoSession: ^ID3D11CryptoSession, RandomNumberSize: UINT, pRandomNumber: rawptr),
    FinishSessionKeyRefresh : proc(This: ^ID3D11VideoContext2, pCryptoSession: ^ID3D11CryptoSession),
    GetEncryptionBltKey : proc(This: ^ID3D11VideoContext2, pCryptoSession: ^ID3D11CryptoSession, KeySize: UINT, pReadbackKey: rawptr) -> HRESULT,
    NegotiateAuthenticatedChannelKeyExchange : proc(This: ^ID3D11VideoContext2, pChannel: ^ID3D11AuthenticatedChannel, DataSize: UINT, pData: rawptr) -> HRESULT,
    QueryAuthenticatedChannel : proc(This: ^ID3D11VideoContext2, pChannel: ^ID3D11AuthenticatedChannel, InputSize: UINT, pInput: rawptr, OutputSize: UINT, pOutput: rawptr) -> HRESULT,
    ConfigureAuthenticatedChannel : proc(This: ^ID3D11VideoContext2, pChannel: ^ID3D11AuthenticatedChannel, InputSize: UINT, pInput: rawptr, pOutput: ^D3D11_AUTHENTICATED_CONFIGURE_OUTPUT) -> HRESULT,
    VideoProcessorSetStreamRotation : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, Rotation: D3D11_VIDEO_PROCESSOR_ROTATION),
    VideoProcessorGetStreamRotation : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnable: ^BOOL, pRotation: ^D3D11_VIDEO_PROCESSOR_ROTATION),
    SubmitDecoderBuffers1 : proc(This: ^ID3D11VideoContext2, pDecoder: ^ID3D11VideoDecoder, NumBuffers: UINT, pBufferDesc: ^D3D11_VIDEO_DECODER_BUFFER_DESC1) -> HRESULT,
    GetDataForNewHardwareKey : proc(This: ^ID3D11VideoContext2, pCryptoSession: ^ID3D11CryptoSession, PrivateInputSize: UINT, pPrivatInputData: rawptr, pPrivateOutputData: ^UINT64) -> HRESULT,
    CheckCryptoSessionStatus : proc(This: ^ID3D11VideoContext2, pCryptoSession: ^ID3D11CryptoSession, pStatus: ^D3D11_CRYPTO_SESSION_STATUS) -> HRESULT,
    DecoderEnableDownsampling : proc(This: ^ID3D11VideoContext2, pDecoder: ^ID3D11VideoDecoder, InputColorSpace: DXGI_COLOR_SPACE_TYPE, pOutputDesc: ^D3D11_VIDEO_SAMPLE_DESC, ReferenceFrameCount: UINT) -> HRESULT,
    DecoderUpdateDownsampling : proc(This: ^ID3D11VideoContext2, pDecoder: ^ID3D11VideoDecoder, pOutputDesc: ^D3D11_VIDEO_SAMPLE_DESC) -> HRESULT,
    VideoProcessorSetOutputColorSpace1 : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, ColorSpace: DXGI_COLOR_SPACE_TYPE),
    VideoProcessorSetOutputShaderUsage : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, ShaderUsage: BOOL),
    VideoProcessorGetOutputColorSpace1 : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, pColorSpace: ^DXGI_COLOR_SPACE_TYPE),
    VideoProcessorGetOutputShaderUsage : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, pShaderUsage: ^BOOL),
    VideoProcessorSetStreamColorSpace1 : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, ColorSpace: DXGI_COLOR_SPACE_TYPE),
    VideoProcessorSetStreamMirror : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, FlipHorizontal: BOOL, FlipVertical: BOOL),
    VideoProcessorGetStreamColorSpace1 : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pColorSpace: ^DXGI_COLOR_SPACE_TYPE),
    VideoProcessorGetStreamMirror : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnable: ^BOOL, pFlipHorizontal: ^BOOL, pFlipVertical: ^BOOL),
    VideoProcessorGetBehaviorHints : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, OutputWidth: UINT, OutputHeight: UINT, OutputFormat: DXGI_FORMAT, StreamCount: UINT, pStreams: ^D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT, pBehaviorHints: ^UINT) -> HRESULT,
    VideoProcessorSetOutputHDRMetaData : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, Type: DXGI_HDR_METADATA_TYPE, Size: UINT, pHDRMetaData: rawptr),
    VideoProcessorGetOutputHDRMetaData : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, pType: ^DXGI_HDR_METADATA_TYPE, Size: UINT, pMetaData: rawptr),
    VideoProcessorSetStreamHDRMetaData : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Type: DXGI_HDR_METADATA_TYPE, Size: UINT, pHDRMetaData: rawptr),
    VideoProcessorGetStreamHDRMetaData : proc(This: ^ID3D11VideoContext2, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pType: ^DXGI_HDR_METADATA_TYPE, Size: UINT, pMetaData: rawptr),
}

D3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM :: struct {
    DecoderDesc: D3D11_VIDEO_DECODER_DESC,
    Components: UINT,
    BinCount: UINT,
    CounterBitDepth: UINT,
}

ID3D11VideoDevice2 :: struct {
    using vtbl: ^ID3D11VideoDevice2Vtbl,
}

ID3D11VideoDevice2Vtbl :: struct {
    QueryInterface : proc(This: ^ID3D11VideoDevice2, riid: REFIID, ppvObject: ^rawptr) -> HRESULT,
    AddRef : proc(This: ^ID3D11VideoDevice2) -> ULONG,
    Release : proc(This: ^ID3D11VideoDevice2) -> ULONG,
    CreateVideoDecoder : proc(This: ^ID3D11VideoDevice2, pVideoDesc: ^D3D11_VIDEO_DECODER_DESC, pConfig: ^D3D11_VIDEO_DECODER_CONFIG, ppDecoder: ^^ID3D11VideoDecoder) -> HRESULT,
    CreateVideoProcessor : proc(This: ^ID3D11VideoDevice2, pEnum: ^ID3D11VideoProcessorEnumerator, RateConversionIndex: UINT, ppVideoProcessor: ^^ID3D11VideoProcessor) -> HRESULT,
    CreateAuthenticatedChannel : proc(This: ^ID3D11VideoDevice2, ChannelType: D3D11_AUTHENTICATED_CHANNEL_TYPE, ppAuthenticatedChannel: ^^ID3D11AuthenticatedChannel) -> HRESULT,
    CreateCryptoSession : proc(This: ^ID3D11VideoDevice2, pCryptoType: ^GUID, pDecoderProfile: ^GUID, pKeyExchangeType: ^GUID, ppCryptoSession: ^^ID3D11CryptoSession) -> HRESULT,
    CreateVideoDecoderOutputView : proc(This: ^ID3D11VideoDevice2, pResource: ^ID3D11Resource, pDesc: ^D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC, ppVDOVView: ^^ID3D11VideoDecoderOutputView) -> HRESULT,
    CreateVideoProcessorInputView : proc(This: ^ID3D11VideoDevice2, pResource: ^ID3D11Resource, pEnum: ^ID3D11VideoProcessorEnumerator, pDesc: ^D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC, ppVPIView: ^^ID3D11VideoProcessorInputView) -> HRESULT,
    CreateVideoProcessorOutputView : proc(This: ^ID3D11VideoDevice2, pResource: ^ID3D11Resource, pEnum: ^ID3D11VideoProcessorEnumerator, pDesc: ^D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC, ppVPOView: ^^ID3D11VideoProcessorOutputView) -> HRESULT,
    CreateVideoProcessorEnumerator : proc(This: ^ID3D11VideoDevice2, pDesc: ^D3D11_VIDEO_PROCESSOR_CONTENT_DESC, ppEnum: ^^ID3D11VideoProcessorEnumerator) -> HRESULT,
    GetVideoDecoderProfileCount : proc(This: ^ID3D11VideoDevice2) -> UINT,
    GetVideoDecoderProfile : proc(This: ^ID3D11VideoDevice2, Index: UINT, pDecoderProfile: ^GUID) -> HRESULT,
    CheckVideoDecoderFormat : proc(This: ^ID3D11VideoDevice2, pDecoderProfile: ^GUID, Format: DXGI_FORMAT, pSupported: ^BOOL) -> HRESULT,
    GetVideoDecoderConfigCount : proc(This: ^ID3D11VideoDevice2, pDesc: ^D3D11_VIDEO_DECODER_DESC, pCount: ^UINT) -> HRESULT,
    GetVideoDecoderConfig : proc(This: ^ID3D11VideoDevice2, pDesc: ^D3D11_VIDEO_DECODER_DESC, Index: UINT, pConfig: ^D3D11_VIDEO_DECODER_CONFIG) -> HRESULT,
    GetContentProtectionCaps : proc(This: ^ID3D11VideoDevice2, pCryptoType: ^GUID, pDecoderProfile: ^GUID, pCaps: ^D3D11_VIDEO_CONTENT_PROTECTION_CAPS) -> HRESULT,
    CheckCryptoKeyExchange : proc(This: ^ID3D11VideoDevice2, pCryptoType: ^GUID, pDecoderProfile: ^GUID, Index: UINT, pKeyExchangeType: ^GUID) -> HRESULT,
    SetPrivateData : proc(This: ^ID3D11VideoDevice2, guid: REFGUID, DataSize: UINT, pData: rawptr) -> HRESULT,
    SetPrivateDataInterface : proc(This: ^ID3D11VideoDevice2, guid: REFGUID, pData: ^IUnknown) -> HRESULT,
    GetCryptoSessionPrivateDataSize : proc(This: ^ID3D11VideoDevice2, pCryptoType: ^GUID, pDecoderProfile: ^GUID, pKeyExchangeType: ^GUID, pPrivateInputSize: ^UINT, pPrivateOutputSize: ^UINT) -> HRESULT,
    GetVideoDecoderCaps : proc(This: ^ID3D11VideoDevice2, pDecoderProfile: ^GUID, SampleWidth: UINT, SampleHeight: UINT, pFrameRate: ^DXGI_RATIONAL, BitRate: UINT, pCryptoType: ^GUID, pDecoderCaps: ^UINT) -> HRESULT,
    CheckVideoDecoderDownsampling : proc(This: ^ID3D11VideoDevice2, pInputDesc: ^D3D11_VIDEO_DECODER_DESC, InputColorSpace: DXGI_COLOR_SPACE_TYPE, pInputConfig: ^D3D11_VIDEO_DECODER_CONFIG, pFrameRate: ^DXGI_RATIONAL, pOutputDesc: ^D3D11_VIDEO_SAMPLE_DESC, pSupported: ^BOOL, pRealTimeHint: ^BOOL) -> HRESULT,
    RecommendVideoDecoderDownsampleParameters : proc(This: ^ID3D11VideoDevice2, pInputDesc: ^D3D11_VIDEO_DECODER_DESC, InputColorSpace: DXGI_COLOR_SPACE_TYPE, pInputConfig: ^D3D11_VIDEO_DECODER_CONFIG, pFrameRate: ^DXGI_RATIONAL, pRecommendedOutputDesc: ^D3D11_VIDEO_SAMPLE_DESC) -> HRESULT,
    CheckFeatureSupport : proc(This: ^ID3D11VideoDevice2, Feature: UINT, pFeatureSupportData: rawptr, FeatureSupportDataSize: UINT) -> HRESULT,
    NegotiateCryptoSessionKeyExchangeMT : proc(This: ^ID3D11VideoDevice2, pCryptoSession: ^ID3D11CryptoSession, flags: UINT, DataSize: UINT, pData: rawptr) -> HRESULT,
}

D3D11_VIDEO_DECODER_BUFFER_DESC2 :: struct {
    BufferType: D3D11_VIDEO_DECODER_BUFFER_TYPE,
    DataOffset: UINT,
    DataSize: UINT,
    pIV: rawptr,
    IVSize: UINT,
    pSubSampleMappingBlock: ^D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK,
    SubSampleMappingCount: UINT,
    cBlocksStripeEncrypted: UINT,
    cBlocksStripeClear: UINT,
}

ID3D11VideoContext3 :: struct {
    using vtbl: ^ID3D11VideoContext3Vtbl,
}

ID3D11VideoContext3Vtbl :: struct {
    QueryInterface : proc(This: ^ID3D11VideoContext3, riid: REFIID, ppvObject: ^rawptr) -> HRESULT,
    AddRef : proc(This: ^ID3D11VideoContext3) -> ULONG,
    Release : proc(This: ^ID3D11VideoContext3) -> ULONG,
    GetDevice : proc(This: ^ID3D11VideoContext3, ppDevice: ^^ID3D11Device),
    GetPrivateData : proc(This: ^ID3D11VideoContext3, guid: REFGUID, pDataSize: ^UINT, pData: rawptr) -> HRESULT,
    SetPrivateData : proc(This: ^ID3D11VideoContext3, guid: REFGUID, DataSize: UINT, pData: rawptr) -> HRESULT,
    SetPrivateDataInterface : proc(This: ^ID3D11VideoContext3, guid: REFGUID, pData: ^IUnknown) -> HRESULT,
    GetDecoderBuffer : proc(This: ^ID3D11VideoContext3, pDecoder: ^ID3D11VideoDecoder, Type: D3D11_VIDEO_DECODER_BUFFER_TYPE, pBufferSize: ^UINT, ppBuffer: ^rawptr) -> HRESULT,
    ReleaseDecoderBuffer : proc(This: ^ID3D11VideoContext3, pDecoder: ^ID3D11VideoDecoder, Type: D3D11_VIDEO_DECODER_BUFFER_TYPE) -> HRESULT,
    DecoderBeginFrame : proc(This: ^ID3D11VideoContext3, pDecoder: ^ID3D11VideoDecoder, pView: ^ID3D11VideoDecoderOutputView, ContentKeySize: UINT, pContentKey: rawptr) -> HRESULT,
    DecoderEndFrame : proc(This: ^ID3D11VideoContext3, pDecoder: ^ID3D11VideoDecoder) -> HRESULT,
    SubmitDecoderBuffers : proc(This: ^ID3D11VideoContext3, pDecoder: ^ID3D11VideoDecoder, NumBuffers: UINT, pBufferDesc: ^D3D11_VIDEO_DECODER_BUFFER_DESC) -> HRESULT,
    DecoderExtension : proc(This: ^ID3D11VideoContext3, pDecoder: ^ID3D11VideoDecoder, pExtensionData: ^D3D11_VIDEO_DECODER_EXTENSION) -> APP_DEPRECATED_HRESULT,
    VideoProcessorSetOutputTargetRect : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, Enable: BOOL, pRect: ^RECT),
    VideoProcessorSetOutputBackgroundColor : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, YCbCr: BOOL, pColor: ^D3D11_VIDEO_COLOR),
    VideoProcessorSetOutputColorSpace : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, pColorSpace: ^D3D11_VIDEO_PROCESSOR_COLOR_SPACE),
    VideoProcessorSetOutputAlphaFillMode : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, AlphaFillMode: D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, StreamIndex: UINT),
    VideoProcessorSetOutputConstriction : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, Enable: BOOL, Size: SIZE),
    VideoProcessorSetOutputStereoMode : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, Enable: BOOL),
    VideoProcessorSetOutputExtension : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, pExtensionGuid: ^GUID, DataSize: UINT, pData: rawptr) -> APP_DEPRECATED_HRESULT,
    VideoProcessorGetOutputTargetRect : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, Enabled: ^BOOL, pRect: ^RECT),
    VideoProcessorGetOutputBackgroundColor : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, pYCbCr: ^BOOL, pColor: ^D3D11_VIDEO_COLOR),
    VideoProcessorGetOutputColorSpace : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, pColorSpace: ^D3D11_VIDEO_PROCESSOR_COLOR_SPACE),
    VideoProcessorGetOutputAlphaFillMode : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, pAlphaFillMode: ^D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, pStreamIndex: ^UINT),
    VideoProcessorGetOutputConstriction : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, pEnabled: ^BOOL, pSize: ^SIZE),
    VideoProcessorGetOutputStereoMode : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, pEnabled: ^BOOL),
    VideoProcessorGetOutputExtension : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, pExtensionGuid: ^GUID, DataSize: UINT, pData: rawptr) -> APP_DEPRECATED_HRESULT,
    VideoProcessorSetStreamFrameFormat : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, FrameFormat: D3D11_VIDEO_FRAME_FORMAT),
    VideoProcessorSetStreamColorSpace : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pColorSpace: ^D3D11_VIDEO_PROCESSOR_COLOR_SPACE),
    VideoProcessorSetStreamOutputRate : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, OutputRate: D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, RepeatFrame: BOOL, pCustomRate: ^DXGI_RATIONAL),
    VideoProcessorSetStreamSourceRect : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, pRect: ^RECT),
    VideoProcessorSetStreamDestRect : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, pRect: ^RECT),
    VideoProcessorSetStreamAlpha : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, Alpha: FLOAT),
    VideoProcessorSetStreamPalette : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Count: UINT, pEntries: ^UINT),
    VideoProcessorSetStreamPixelAspectRatio : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, pSourceAspectRatio: ^DXGI_RATIONAL, pDestinationAspectRatio: ^DXGI_RATIONAL),
    VideoProcessorSetStreamLumaKey : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, Lower: FLOAT, Upper: FLOAT),
    VideoProcessorSetStreamStereoFormat : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, Format: D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, LeftViewFrame0: BOOL, BaseViewFrame0: BOOL, FlipMode: D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, MonoOffset: int),
    VideoProcessorSetStreamAutoProcessingMode : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL),
    VideoProcessorSetStreamFilter : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Filter: D3D11_VIDEO_PROCESSOR_FILTER, Enable: BOOL, Level: int),
    VideoProcessorSetStreamExtension : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pExtensionGuid: ^GUID, DataSize: UINT, pData: rawptr) -> APP_DEPRECATED_HRESULT,
    VideoProcessorGetStreamFrameFormat : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pFrameFormat: ^D3D11_VIDEO_FRAME_FORMAT),
    VideoProcessorGetStreamColorSpace : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pColorSpace: ^D3D11_VIDEO_PROCESSOR_COLOR_SPACE),
    VideoProcessorGetStreamOutputRate : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pOutputRate: ^D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, pRepeatFrame: ^BOOL, pCustomRate: ^DXGI_RATIONAL),
    VideoProcessorGetStreamSourceRect : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pRect: ^RECT),
    VideoProcessorGetStreamDestRect : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pRect: ^RECT),
    VideoProcessorGetStreamAlpha : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pAlpha: ^FLOAT),
    VideoProcessorGetStreamPalette : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Count: UINT, pEntries: ^UINT),
    VideoProcessorGetStreamPixelAspectRatio : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pSourceAspectRatio: ^DXGI_RATIONAL, pDestinationAspectRatio: ^DXGI_RATIONAL),
    VideoProcessorGetStreamLumaKey : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL, pLower: ^FLOAT, pUpper: ^FLOAT),
    VideoProcessorGetStreamStereoFormat : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnable: ^BOOL, pFormat: ^D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, pLeftViewFrame0: ^BOOL, pBaseViewFrame0: ^BOOL, pFlipMode: ^D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, MonoOffset: ^int),
    VideoProcessorGetStreamAutoProcessingMode : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnabled: ^BOOL),
    VideoProcessorGetStreamFilter : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Filter: D3D11_VIDEO_PROCESSOR_FILTER, pEnabled: ^BOOL, pLevel: ^int),
    VideoProcessorGetStreamExtension : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pExtensionGuid: ^GUID, DataSize: UINT, pData: rawptr) -> APP_DEPRECATED_HRESULT,
    VideoProcessorBlt : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, pView: ^ID3D11VideoProcessorOutputView, OutputFrame: UINT, StreamCount: UINT, pStreams: ^D3D11_VIDEO_PROCESSOR_STREAM) -> HRESULT,
    NegotiateCryptoSessionKeyExchange : proc(This: ^ID3D11VideoContext3, pCryptoSession: ^ID3D11CryptoSession, DataSize: UINT, pData: rawptr) -> HRESULT,
    EncryptionBlt : proc(This: ^ID3D11VideoContext3, pCryptoSession: ^ID3D11CryptoSession, pSrcSurface: ^ID3D11Texture2D, pDstSurface: ^ID3D11Texture2D, IVSize: UINT, pIV: rawptr),
    DecryptionBlt : proc(This: ^ID3D11VideoContext3, pCryptoSession: ^ID3D11CryptoSession, pSrcSurface: ^ID3D11Texture2D, pDstSurface: ^ID3D11Texture2D, pEncryptedBlockInfo: ^D3D11_ENCRYPTED_BLOCK_INFO, ContentKeySize: UINT, pContentKey: rawptr, IVSize: UINT, pIV: rawptr),
    StartSessionKeyRefresh : proc(This: ^ID3D11VideoContext3, pCryptoSession: ^ID3D11CryptoSession, RandomNumberSize: UINT, pRandomNumber: rawptr),
    FinishSessionKeyRefresh : proc(This: ^ID3D11VideoContext3, pCryptoSession: ^ID3D11CryptoSession),
    GetEncryptionBltKey : proc(This: ^ID3D11VideoContext3, pCryptoSession: ^ID3D11CryptoSession, KeySize: UINT, pReadbackKey: rawptr) -> HRESULT,
    NegotiateAuthenticatedChannelKeyExchange : proc(This: ^ID3D11VideoContext3, pChannel: ^ID3D11AuthenticatedChannel, DataSize: UINT, pData: rawptr) -> HRESULT,
    QueryAuthenticatedChannel : proc(This: ^ID3D11VideoContext3, pChannel: ^ID3D11AuthenticatedChannel, InputSize: UINT, pInput: rawptr, OutputSize: UINT, pOutput: rawptr) -> HRESULT,
    ConfigureAuthenticatedChannel : proc(This: ^ID3D11VideoContext3, pChannel: ^ID3D11AuthenticatedChannel, InputSize: UINT, pInput: rawptr, pOutput: ^D3D11_AUTHENTICATED_CONFIGURE_OUTPUT) -> HRESULT,
    VideoProcessorSetStreamRotation : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, Rotation: D3D11_VIDEO_PROCESSOR_ROTATION),
    VideoProcessorGetStreamRotation : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnable: ^BOOL, pRotation: ^D3D11_VIDEO_PROCESSOR_ROTATION),
    SubmitDecoderBuffers1 : proc(This: ^ID3D11VideoContext3, pDecoder: ^ID3D11VideoDecoder, NumBuffers: UINT, pBufferDesc: ^D3D11_VIDEO_DECODER_BUFFER_DESC1) -> HRESULT,
    GetDataForNewHardwareKey : proc(This: ^ID3D11VideoContext3, pCryptoSession: ^ID3D11CryptoSession, PrivateInputSize: UINT, pPrivatInputData: rawptr, pPrivateOutputData: ^UINT64) -> HRESULT,
    CheckCryptoSessionStatus : proc(This: ^ID3D11VideoContext3, pCryptoSession: ^ID3D11CryptoSession, pStatus: ^D3D11_CRYPTO_SESSION_STATUS) -> HRESULT,
    DecoderEnableDownsampling : proc(This: ^ID3D11VideoContext3, pDecoder: ^ID3D11VideoDecoder, InputColorSpace: DXGI_COLOR_SPACE_TYPE, pOutputDesc: ^D3D11_VIDEO_SAMPLE_DESC, ReferenceFrameCount: UINT) -> HRESULT,
    DecoderUpdateDownsampling : proc(This: ^ID3D11VideoContext3, pDecoder: ^ID3D11VideoDecoder, pOutputDesc: ^D3D11_VIDEO_SAMPLE_DESC) -> HRESULT,
    VideoProcessorSetOutputColorSpace1 : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, ColorSpace: DXGI_COLOR_SPACE_TYPE),
    VideoProcessorSetOutputShaderUsage : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, ShaderUsage: BOOL),
    VideoProcessorGetOutputColorSpace1 : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, pColorSpace: ^DXGI_COLOR_SPACE_TYPE),
    VideoProcessorGetOutputShaderUsage : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, pShaderUsage: ^BOOL),
    VideoProcessorSetStreamColorSpace1 : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, ColorSpace: DXGI_COLOR_SPACE_TYPE),
    VideoProcessorSetStreamMirror : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Enable: BOOL, FlipHorizontal: BOOL, FlipVertical: BOOL),
    VideoProcessorGetStreamColorSpace1 : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pColorSpace: ^DXGI_COLOR_SPACE_TYPE),
    VideoProcessorGetStreamMirror : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pEnable: ^BOOL, pFlipHorizontal: ^BOOL, pFlipVertical: ^BOOL),
    VideoProcessorGetBehaviorHints : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, OutputWidth: UINT, OutputHeight: UINT, OutputFormat: DXGI_FORMAT, StreamCount: UINT, pStreams: ^D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT, pBehaviorHints: ^UINT) -> HRESULT,
    VideoProcessorSetOutputHDRMetaData : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, Type: DXGI_HDR_METADATA_TYPE, Size: UINT, pHDRMetaData: rawptr),
    VideoProcessorGetOutputHDRMetaData : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, pType: ^DXGI_HDR_METADATA_TYPE, Size: UINT, pMetaData: rawptr),
    VideoProcessorSetStreamHDRMetaData : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, Type: DXGI_HDR_METADATA_TYPE, Size: UINT, pHDRMetaData: rawptr),
    VideoProcessorGetStreamHDRMetaData : proc(This: ^ID3D11VideoContext3, pVideoProcessor: ^ID3D11VideoProcessor, StreamIndex: UINT, pType: ^DXGI_HDR_METADATA_TYPE, Size: UINT, pMetaData: rawptr),
    DecoderBeginFrame1 : proc(This: ^ID3D11VideoContext3, pDecoder: ^ID3D11VideoDecoder, pView: ^ID3D11VideoDecoderOutputView, ContentKeySize: UINT, pContentKey: rawptr, NumComponentHistograms: UINT, pHistogramOffsets: ^UINT, ppHistogramBuffers: ^^ID3D11Buffer) -> HRESULT,
    SubmitDecoderBuffers2 : proc(This: ^ID3D11VideoContext3, pDecoder: ^ID3D11VideoDecoder, NumBuffers: UINT, pBufferDesc: ^D3D11_VIDEO_DECODER_BUFFER_DESC2) -> HRESULT,
}

D3D11_FEATURE_DATA_D3D11_OPTIONS4 :: struct {
    ExtendedNV12SharedTextureSupported: BOOL,
}

//D3D11_FEATURE_VIDEO
D3D11_FEATURE_VIDEO_DECODER_HISTOGRAM : u32 :  0;

//D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_Y : u32 :  0;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_U : u32 :  1;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_V : u32 :  2;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_R : u32 :  0;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_G : u32 :  1;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_B : u32 :  2;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_A : u32 :  3;

//D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_NONE : u32 :  0;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_Y : u32 :  ( 1 << D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_Y ) ;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_U : u32 :  ( 1 << D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_U ) ;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_V : u32 :  ( 1 << D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_V ) ;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_R : u32 :  ( 1 << D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_R ) ;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_G : u32 :  ( 1 << D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_G ) ;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_B : u32 :  ( 1 << D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_B ) ;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_A : u32 :  ( 1 << D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_A ) ;

//D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS
D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAG_NONE : u32 :  0;
